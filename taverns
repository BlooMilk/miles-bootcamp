DROP TABLE IF EXISTS RoomStays; 
GO
DROP TABLE IF EXISTS GuestsClasses; 
GO
DROP TABLE IF EXISTS Classes; 
GO
DROP TABLE IF EXISTS Guests; 
GO
DROP TABLE IF EXISTS GuestStatus; 
GO
DROP TABLE IF EXISTS ServiceSales; 
GO
DROP TABLE IF EXISTS Services; 
GO
DROP TABLE IF EXISTS ServiceStatus; 
GO
DROP TABLE IF EXISTS SupplyReceipts; 
GO
DROP TABLE IF EXISTS Inventory; 
GO
DROP TABLE IF EXISTS Rooms; 
GO
DROP TABLE IF EXISTS Taverns; 
GO
DROP TABLE IF EXISTS Owners; 
GO
DROP TABLE IF EXISTS Roles; 
GO
DROP TABLE IF EXISTS Locations; 
GO
DROP TABLE IF EXISTS Supply; 
GO

CREATE TABLE Supply (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255) NOT NULL UNIQUE,
	UnitName varchar(255) NOT NULL
); 
GO

CREATE TABLE Locations (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255) NOT NULL UNIQUE
); 
GO

CREATE TABLE Roles (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255) NOT NULL UNIQUE,
	Description varchar(1000) NOT NULL
); 
GO

CREATE TABLE Owners (
	ID int IDENTITY(1,1),
	Name varchar(255) NOT NULL,
	RoleID int NOT NULL
); 
GO

CREATE TABLE Taverns (
	ID int IDENTITY(1,1),
	Name varchar(255) NOT NULL,
	LocationID int NOT NULL,
	OwnerID int NOT NULL,
	Floors tinyint NOT NULL
); 
GO

ALTER TABLE Taverns 
ADD PRIMARY KEY (ID);
GO

ALTER TABLE Owners
ADD PRIMARY KEY (ID);
GO

ALTER TABLE Taverns
ADD FOREIGN KEY (LocationID) REFERENCES Locations(ID);
GO

ALTER TABLE Taverns
ADD FOREIGN KEY (OwnerID) REFERENCES Owners(ID);
GO

ALTER TABLE Owners
ADD FOREIGN KEY (RoleID) REFERENCES Roles(ID);
GO

CREATE TABLE Rooms (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Beds tinyint NOT NULL,
	Status varchar(255) NOT NULL,
	TavernID int NOT NULL FOREIGN KEY REFERENCES Taverns(ID),
	Price decimal(6,2) NOT NULL
);
GO

CREATE TABLE Inventory (
	ID int IDENTITY(1,1) PRIMARY KEY,
	SupplyID int NOT NULL FOREIGN KEY REFERENCES Supply(ID),
	TavernID int NOT NULL FOREIGN KEY REFERENCES Taverns(ID),
	CurrentCount int NOT NULL,
	DateUpdated date NOT NULL
); 
GO

CREATE TABLE SupplyReceipts (
	ID int IDENTITY(1,1) PRIMARY KEY,
	SupplyID int NOT NULL FOREIGN KEY REFERENCES Supply(ID),
	TavernID int NOT NULL FOREIGN KEY REFERENCES Taverns(ID),
	SupplyCost decimal(9,2) NOT NULL,
	AmountReceived int NOT NULL,
	DateReceived date NOT NULL
); 
GO

CREATE TABLE ServiceStatus (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255) NOT NULL UNIQUE
); 
GO

CREATE TABLE Services (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255),
	ServiceStatusID int FOREIGN KEY REFERENCES ServiceStatus(ID),
	TavernID int FOREIGN KEY REFERENCES Taverns(ID)
); 
GO

CREATE TABLE ServiceSales (
	ID int IDENTITY(1,1) PRIMARY KEY,
	ServiceID int NOT NULL FOREIGN KEY REFERENCES Services(ID),
	Guest varchar(255) NOT NULL,
	AmountPurchased int NOT NULL,
	Price decimal(9,2) NOT NULL,
	DatePurchased date NOT NULL,	
); 
GO

CREATE TABLE GuestStatus (
	ID int IDENTITY(1,1) PRIMARY KEY,
	StatusName varchar(255) NOT NULL UNIQUE
); 
GO

CREATE TABLE Guests (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255) NOT NULL,
	Notes varchar(1000),
	Birthday date,
	Cakeday date,
	GuestStatusID int FOREIGN KEY REFERENCES GuestStatus(ID) NOT NULL
); 
GO

CREATE TABLE Classes (
	ID int IDENTITY(1,1) PRIMARY KEY,
	Name varchar(255) NOT NULL UNIQUE
); 
GO

CREATE TABLE GuestsClasses (
	GuestID int NOT NULL FOREIGN KEY REFERENCES Guests(ID),
	ClassID int NOT NULL FOREIGN KEY REFERENCES Classes(ID),
	ClassLevel int NOT NULL
); 
GO

CREATE TABLE RoomStays (
	ID int IDENTITY(1,1) PRIMARY KEY,
	RoomID int NOT NULL FOREIGN KEY REFERENCES Rooms(ID),
	GuestID int NOT NULL FOREIGN KEY REFERENCES Guests(ID),
	DateStayed date NOT NULL
);
GO

INSERT INTO Supply
VALUES 
	('Brown Ale','Pint'),
	('Honey Mead','Flagon'),
	('Red Wine','Bottle'),
	('Barley Bread','Loaf'),
	('Mutton','Leg'),
	('Butter Beer','Bottle'),
	('Blue Milk','Pint'); 
GO

INSERT INTO Locations
VALUES 
	('Bree'),
	('Gloomhaven'),
	('Imre'),
	('Hogsmeade'),
	('Mos Eisley'); 
GO

INSERT INTO Roles
VALUES 
	('Barkeep','I dont mind serving up a few cocktails'),
	('Rogue','Nobody will notice if their change is a little short'),
	('Witch','Patrons find my charm to be absolutely enchanting'),
	('Musician','Nothing like a lively tune to help the drinks flow'), 
	('Admin','Someone needs to make sure things run smoothly');
GO

INSERT INTO Owners
VALUES 
	('Barliman Butterbur',1),
	('Michael',2),
	('Jeksera',3),
	('Stanchion',4),
	('Madam Rosmerta',3),
	('Chalmun',5); 
GO

INSERT INTO Taverns
VALUES 
	('The Prancing Pony',1,1,2),
	('The Good Place',2,2,1),
	('The Bad Place',2,3,1),
	('The Eolian',3,4,1),
	('The Three Broomsticks',4,5,2),
	('Chalmuns Cantina',5,6,1); 
GO

INSERT INTO Rooms
VALUES
	(5,'Unavailable',1,220.00),
	(2,'Vacant',2,87.65),
	(2,'Occupied',2,102.94),
	(1,'Uncomfortable',3,66.66);
GO

INSERT INTO Inventory
VALUES 
	(1,1,200,'2020-08-15'),
	(2,1,150,'2020-08-15'),
	(2,2,100,'2020-09-07'),
	(5,2,30,'2020-09-07'),
	(1,3,100,'1999-12-31'),
	(4,3,50,'1999-12-31'),
	(1,4,200,'2020-08-31'),
	(3,4,75,'2020-08-31'),
	(6,5,300,'2020-09-14'),
	(7,6,100,'2020-09-01'); 
GO

INSERT INTO SupplyReceipts
VALUES 
	(1,1,650.50,400,'2020-08-01'),
	(2,1,500.00,300,'2020-08-01'),
	(2,2,250.00,150,'2020-09-01'),
	(5,2,125.75,50,'2020-09-01'),
	(1,3,975.75,600,'1999-12-31'),
	(4,3,544.33,300,'1999-12-31'),
	(1,4,480.00,300,'2020-08-24'),
	(3,4,1500.00,150,'2020-08-24'),
	(6,5,1287.58,600,'2020-09-07'),
	(7,6,460.50,150,'2020-08-27'); 
GO

INSERT INTO ServiceStatus
VALUES 
	('Available'),
	('Temporarily Unavailable'),
	('Discontinued'); 
GO

INSERT INTO Services
VALUES 
	('Overnight Lodging',2,1),
	('Blackjack',1,3),
	('Live Entertainment',1,4),
	('Droid Service',3,6); 
GO

INSERT INTO ServiceSales
VALUES 
	(1,'Gandalf',1,44.00,'2001-06-28'),
	(1,'Strider',5,220.00,'2001-12-19'),
	(2,'Eleanor',10,534.89,'2016-09-16'),
	(3,'Kvothe',1,50.00,'2007-03-27'),
	(4,'Luke',2,20.50,'1977-05-25'),
	(2,'Chidi',1,25.00,'2017-01-01'),
	(2,'Tahani',3,200.73,'2016-10-10'),
	(2,'Jason',22,1058.92,'2016-11-11'),
	(3,'Denna',1,50.00,'2007-05-12'),
	(3,'Fela',1,50.00,'2006-12-01'),
	(3,'Simmon',2,100.00,'2008-03-28');
GO

INSERT INTO GuestStatus
VALUES
	('Hungry'),
	('Angry'),
	('Drunk'),
	('Jolly');
GO

INSERT INTO Guests
VALUES
	('Frodo','Small in stature but has a big heart','1980-01-25','2001-12-07',4),
	('Simmon','A good friend and drinking buddy','1990-06-18','2010-03-01',3),
	('Harry','A young lad with shocking features','1993-09-03','2003-09-10',2),
	('Ben','Wise and old, an ideal mentor','1917-11-28','1957-02-15',1),
	('Link','The strong but silent type','2001-04-21','2006-01-01',1);
GO

INSERT INTO Classes
VALUES
	('Cleric'),
	('Rogue'),
	('Paladin'),
	('Wizard'),
	('Warrior');
GO

INSERT INTO GuestsClasses
VALUES
	(1,2,5),
	(2,4,2),
	(2,5,1),
	(3,4,3),
	(4,3,11),
	(4,4,6);
GO

INSERT INTO RoomStays
VALUES
	(1,1,'2001-12-19'),
	(2,2,'2008-09-17'),
	(2,2,'2010-09-17'),
	(3,3,'2020-09-28'),
	(4,3,'1980-01-20');
GO


--1
SELECT Owners.ID, Owners.Name, Roles.Name AS 'Role', Roles.Description FROM Owners
LEFT JOIN Roles ON (Owners.RoleID = Roles.ID)


--2
SELECT Classes.ID, Classes.Name AS 'Class', COUNT(Guests.Name) AS '# of Guests' FROM Classes
LEFT JOIN GuestsClasses ON (Classes.ID = GuestsClasses.ClassID)
LEFT JOIN Guests ON (GuestsClasses.GuestID = Guests.ID)
GROUP BY Classes.ID, Classes.Name


--3
SELECT Guests.Name, ISNULL(Classes.Name, 'No Class') AS 'Class', ISNULL(GuestsClasses.ClassLevel, 0) AS 'Level', (
	CASE WHEN ClassLevel < 5
	THEN
		'Beginner'
	WHEN ClassLevel BETWEEN 5 AND 10
	THEN
		'Intermediate'
	WHEN ClassLevel > 10
	THEN
		'Expert'
	ELSE
		'No Class'
	END) AS 'Label'
FROM Guests
LEFT JOIN GuestsClasses ON (Guests.ID = GuestsClasses.GuestID)
LEFT JOIN Classes ON (GuestsClasses.ClassID = Classes.ID)
ORDER BY Guests.Name ASC


--4
IF OBJECT_ID (N'dbo.getLevelGroup', N'FN') IS NOT NULL  
    DROP FUNCTION dbo.getLevelGroup;  
GO  
CREATE FUNCTION dbo.getLevelGroup(@Level int)
RETURNS varchar(20)
AS
BEGIN
	DECLARE @ret varchar(20)
	SELECT @ret = (CASE 
	WHEN @Level < 5
	THEN
		'Beginner'
	WHEN @Level BETWEEN 5 AND 10
	THEN
		'Intermediate'
	WHEN @Level > 10
	THEN
		'Expert'
	ELSE
		'No Class'
	END)
	RETURN @ret;
END;

--Function in use
SELECT Guests.Name, ISNULL(Classes.Name, 'No Class') AS 'Class', ISNULL(GuestsClasses.ClassLevel, 0) AS 'Level', dbo.getLevelGroup(GuestsClasses.ClassLevel) AS 'Label'
FROM Guests
LEFT JOIN GuestsClasses ON (Guests.ID = GuestsClasses.GuestID)
LEFT JOIN Classes ON (GuestsClasses.ClassID = Classes.ID)
ORDER BY Guests.Name ASC


--5
IF OBJECT_ID (N'dbo.getOpenRooms', N'IF') IS NOT NULL  
    DROP FUNCTION dbo.getOpenRooms;  
GO  
CREATE FUNCTION dbo.getOpenRooms (@Date date)  
RETURNS TABLE  
AS                
RETURN   
(
	SELECT DISTINCT Rooms.ID AS 'Room ID', Rooms.Price, Taverns.Name AS 'Tavern' FROM Rooms
	LEFT JOIN Taverns ON (Rooms.TavernID = Taverns.ID)
	LEFT JOIN RoomStays ON (Rooms.ID = RoomStays.RoomID)
	WHERE RoomStays.DateStayed != @Date
);

--Function in use
SELECT * FROM dbo.getOpenRooms('2001-12-19')


--6
IF OBJECT_ID (N'dbo.getPricedRooms', N'IF') IS NOT NULL  
    DROP FUNCTION dbo.getPricedRooms;  
GO  
CREATE FUNCTION dbo.getPricedRooms (@minPrice decimal(6,2), @maxPrice decimal(6,2))  
RETURNS TABLE  
AS                
RETURN   
(
	SELECT DISTINCT Rooms.ID AS 'Room ID', Rooms.Price, Rooms.TavernID, Taverns.Name AS 'Tavern Name' FROM Rooms
	LEFT JOIN Taverns ON (Rooms.TavernID = Taverns.ID)
	WHERE Rooms.Price BETWEEN @minPrice AND @maxPrice
);

--Function in use
SELECT * FROM dbo.getPricedRooms(66.67, 219.99)


--7
SELECT 'INSERT INTO Rooms' AS cheaperRoom
UNION ALL
SELECT CONCAT(
	'VALUES (2,''Vacant'','
, 
	(CASE WHEN roomList.TavernID = 1
	THEN
		'2,'
	ELSE
		'1,'
	END)
,
	(Price
	)-0.01
,
	');'
) FROM dbo.getPricedRooms(66.67, 220.00) AS roomList
WHERE Price = (SELECT Min(Price) FROM dbo.getPricedRooms(66.67, 220.00))